#!/usr/bin/env ruby
$VERBOSE = true # enable warnings

require 'optparse'

require_relative '../lib/zokor'

def parse_args(args)
  options = {local_host: '127.0.0.1', local_port: 8080, ssl_opts: {}}

  optparse = OptionParser.new do |opts|
    opts.banner = <<-EOM
usage: #{opts.program_name} [options]

Start a TCP forwarding server on LOCAL_PORT (default #{options[:local_port]}). Send packets to
EXT_HOST:EXT_PORT. Use --proxy to pass through an intermediate proxy server.

Configuration by default is stored in #{Zokor::Config::DEFAULT_CONFIG_DIR}/zokor.yaml

For example:

  Listen on local port 8080, proxy through an intermediate proxy at 192.0.2.1,
  and send packets to an external proxy at example.com:443. Use TLS for the
  connection to the external proxy.
  $ zokor -l 8080 -H example.com -P 443 --ssl --proxy http://192.0.2.1

Options:
    EOM

    opts.version = Zokor::VERSION

    opts.on_tail('-h', '--help', 'Display this message') do
      STDERR.puts opts
      STDERR.puts
      exit
    end
    opts.on_tail('-V', '--version', 'Print version') do
      # puts opts.ver
      puts 'zokor ' + Zokor::VERSION
      exit
    end
    opts.on_tail('-v', '--verbose', 'Be verbose') do
      Zokor.log_level -= 1
    end
    opts.on_tail('-d', '--debug', 'Print debug messages') do
      Zokor.log_level = Logger::DEBUG
      ENV['LOG_CHUNDER'] = '1'
    end

    opts.on('-c', '--config DIR', 'Use given config directory') do |arg|
      options[:config_dir] = arg
    end

    opts.on('--init-config', 'Initialize configuration') do
      options[:init_config] = true
    end

    opts.on('--install-cert', 'Install certificate from standard input',
            ' ') do
      options[:install_cert] = true
    end

    #

    opts.on('-p', '--proxy URL', 'Proxy through URL') do |arg|
      options[:proxy_url] = arg
    end

    opts.on('--local-host HOST',
            "Listen on local HOST, not #{options[:local_host]}") do |arg|
      options[:local_host] = arg
    end
    opts.on('-l', '--local-port PORT',
            "Listen on local PORT, not #{options[:local_port]}") do |arg|
      options[:local_port] = arg
    end

    opts.on('-H', '--ext-host HOST', 'Connect to remote HOST') do |arg|
      options[:remote_host] = arg
    end

    opts.on('-P', '--ext-port PORT', 'Connect to remote PORT', ' ') do |arg|
      options[:remote_port] = arg
    end

    #

    opts.on('-s', '--ssl', 'Use TLS for the external proxy') do
      options[:use_ssl] = true
    end

    opts.on('-C', '--ca-file FILE', 'Specify TLS CA file') do |arg|
      File.open(arg).close # ensure exists
      options[:ssl_opts][:ca_file] = arg
    end
    opts.on('--ca-path DIR', 'Specify TLS CA directory') do |arg|
      File.open(arg).close # ensure exists
      options[:ssl_opts][:ca_path] = arg
    end
    opts.on('-E', '--cert FILE', 'Specify TLS client certificate') do |arg|
      File.open(arg).close # ensure exists
      options[:ssl_opts][:cert_file] = arg
    end
    opts.on('-k', '--key FILE', 'Specify TLS client key', ' ') do |arg|
      File.open(arg).close # ensure exists
      options[:ssl_opts][:key_file] = arg
    end

    #

  end

  optparse.parse!(args)

  config = Zokor::Config.new(options[:config_dir])

  begin
    options = options.merge(config.load_config)
  rescue Errno::ENOENT
    # ignore unless config_dir was specified
    raise if options[:config_dir]
  end

  # options should be set by command line or config file
  unless options[:local_host] && options[:local_port] &&
         options[:remote_host] && options[:remote_port]
    STDERR.puts optparse
    STDERR.puts
    if options[:init_config]
      STDERR.puts 'Error: please pass --ext-host and --ext-port'
    else
      STDERR.puts 'Error: no config or --ext-host, --ext-port found'
    end
    exit 1
  end

  options[:local_port] = Integer(options[:local_port])
  options[:remote_port] = Integer(options[:remote_port])

  # auto enable SSL if SSL options given
  if !options[:use_ssl] && !options[:ssl_opts].empty?
    options[:use_ssl] = true
  end

  if options[:init_config]
    config.interactive_init(options)
    exit
  end

  if options[:install_cert]
    if config.interactive_install_cert
      exit
    else
      exit 2
    end
  end

  pm = Zokor::ProxyMagic.new(options.fetch(:local_host),
                             options.fetch(:local_port),
                             options.fetch(:remote_host),
                             options.fetch(:remote_port),
                             options)
  pm.run_loop
end

if $0 == __FILE__
  parse_args(ARGV.dup)
end
